
stm32f446xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e08  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000fcc  08000fcc  00010fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fe4  08000fe4  00010fec  2**0
                  CONTENTS
  4 .ARM          00000000  08000fe4  08000fe4  00010fec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fe4  08000fec  00010fec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fe4  08000fe4  00010fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fe8  08000fe8  00010fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010fec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000fec  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000fec  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010fec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c55  00000000  00000000  0001101c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000526  00000000  00000000  00012c71  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000198  00000000  00000000  00013198  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000160  00000000  00000000  00013330  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000228a  00000000  00000000  00013490  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001357  00000000  00000000  0001571a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00009a91  00000000  00000000  00016a71  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00020502  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000061c  00000000  00000000  00020580  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000fb4 	.word	0x08000fb4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000fb4 	.word	0x08000fb4

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <GPIO_PeriClkCntrl>:
 * @return  : void
 *
 * @Note	: none
 */
void GPIO_PeriClkCntrl(GPIO_regdef_t *pGPIOx, uint8_t En_Di)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
 800021c:	460b      	mov	r3, r1
 800021e:	70fb      	strb	r3, [r7, #3]
	if(En_Di == ENABLE)
 8000220:	78fb      	ldrb	r3, [r7, #3]
 8000222:	2b01      	cmp	r3, #1
 8000224:	d156      	bne.n	80002d4 <GPIO_PeriClkCntrl+0xc0>
	{
		if(pGPIOx == GPIOA)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a5a      	ldr	r2, [pc, #360]	; (8000394 <GPIO_PeriClkCntrl+0x180>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d106      	bne.n	800023c <GPIO_PeriClkCntrl+0x28>
		{
			GPIOA_CLK_EN();
 800022e:	4b5a      	ldr	r3, [pc, #360]	; (8000398 <GPIO_PeriClkCntrl+0x184>)
 8000230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000232:	4a59      	ldr	r2, [pc, #356]	; (8000398 <GPIO_PeriClkCntrl+0x184>)
 8000234:	f043 0301 	orr.w	r3, r3, #1
 8000238:	6313      	str	r3, [r2, #48]	; 0x30
 800023a:	e04b      	b.n	80002d4 <GPIO_PeriClkCntrl+0xc0>
		}
		else if(pGPIOx == GPIOB)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4a57      	ldr	r2, [pc, #348]	; (800039c <GPIO_PeriClkCntrl+0x188>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d106      	bne.n	8000252 <GPIO_PeriClkCntrl+0x3e>
		{
			GPIOB_CLK_EN();
 8000244:	4b54      	ldr	r3, [pc, #336]	; (8000398 <GPIO_PeriClkCntrl+0x184>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000248:	4a53      	ldr	r2, [pc, #332]	; (8000398 <GPIO_PeriClkCntrl+0x184>)
 800024a:	f043 0302 	orr.w	r3, r3, #2
 800024e:	6313      	str	r3, [r2, #48]	; 0x30
 8000250:	e040      	b.n	80002d4 <GPIO_PeriClkCntrl+0xc0>
		}
		else if(pGPIOx == GPIOC)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a52      	ldr	r2, [pc, #328]	; (80003a0 <GPIO_PeriClkCntrl+0x18c>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d106      	bne.n	8000268 <GPIO_PeriClkCntrl+0x54>
		{
			GPIOC_CLK_EN();
 800025a:	4b4f      	ldr	r3, [pc, #316]	; (8000398 <GPIO_PeriClkCntrl+0x184>)
 800025c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025e:	4a4e      	ldr	r2, [pc, #312]	; (8000398 <GPIO_PeriClkCntrl+0x184>)
 8000260:	f043 0304 	orr.w	r3, r3, #4
 8000264:	6313      	str	r3, [r2, #48]	; 0x30
 8000266:	e035      	b.n	80002d4 <GPIO_PeriClkCntrl+0xc0>
		}
		else if(pGPIOx == GPIOD)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a4e      	ldr	r2, [pc, #312]	; (80003a4 <GPIO_PeriClkCntrl+0x190>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d106      	bne.n	800027e <GPIO_PeriClkCntrl+0x6a>
		{
			GPIOD_CLK_EN();
 8000270:	4b49      	ldr	r3, [pc, #292]	; (8000398 <GPIO_PeriClkCntrl+0x184>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000274:	4a48      	ldr	r2, [pc, #288]	; (8000398 <GPIO_PeriClkCntrl+0x184>)
 8000276:	f043 0308 	orr.w	r3, r3, #8
 800027a:	6313      	str	r3, [r2, #48]	; 0x30
 800027c:	e02a      	b.n	80002d4 <GPIO_PeriClkCntrl+0xc0>
		}
		else if(pGPIOx == GPIOE)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4a49      	ldr	r2, [pc, #292]	; (80003a8 <GPIO_PeriClkCntrl+0x194>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d106      	bne.n	8000294 <GPIO_PeriClkCntrl+0x80>
		{
			GPIOE_CLK_EN();
 8000286:	4b44      	ldr	r3, [pc, #272]	; (8000398 <GPIO_PeriClkCntrl+0x184>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028a:	4a43      	ldr	r2, [pc, #268]	; (8000398 <GPIO_PeriClkCntrl+0x184>)
 800028c:	f043 0310 	orr.w	r3, r3, #16
 8000290:	6313      	str	r3, [r2, #48]	; 0x30
 8000292:	e01f      	b.n	80002d4 <GPIO_PeriClkCntrl+0xc0>
		}
		else if(pGPIOx == GPIOF)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a45      	ldr	r2, [pc, #276]	; (80003ac <GPIO_PeriClkCntrl+0x198>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d106      	bne.n	80002aa <GPIO_PeriClkCntrl+0x96>
		{
			GPIOF_CLK_EN();
 800029c:	4b3e      	ldr	r3, [pc, #248]	; (8000398 <GPIO_PeriClkCntrl+0x184>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a3d      	ldr	r2, [pc, #244]	; (8000398 <GPIO_PeriClkCntrl+0x184>)
 80002a2:	f043 0320 	orr.w	r3, r3, #32
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30
 80002a8:	e014      	b.n	80002d4 <GPIO_PeriClkCntrl+0xc0>
		}
		else if(pGPIOx == GPIOG)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a40      	ldr	r2, [pc, #256]	; (80003b0 <GPIO_PeriClkCntrl+0x19c>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d106      	bne.n	80002c0 <GPIO_PeriClkCntrl+0xac>
		{
			GPIOG_CLK_EN();
 80002b2:	4b39      	ldr	r3, [pc, #228]	; (8000398 <GPIO_PeriClkCntrl+0x184>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b6:	4a38      	ldr	r2, [pc, #224]	; (8000398 <GPIO_PeriClkCntrl+0x184>)
 80002b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002bc:	6313      	str	r3, [r2, #48]	; 0x30
 80002be:	e009      	b.n	80002d4 <GPIO_PeriClkCntrl+0xc0>
		}
		else if(pGPIOx == GPIOH)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4a3c      	ldr	r2, [pc, #240]	; (80003b4 <GPIO_PeriClkCntrl+0x1a0>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d105      	bne.n	80002d4 <GPIO_PeriClkCntrl+0xc0>
		{
			GPIOH_CLK_EN();
 80002c8:	4b33      	ldr	r3, [pc, #204]	; (8000398 <GPIO_PeriClkCntrl+0x184>)
 80002ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002cc:	4a32      	ldr	r2, [pc, #200]	; (8000398 <GPIO_PeriClkCntrl+0x184>)
 80002ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002d2:	6313      	str	r3, [r2, #48]	; 0x30
		}
	}

	if(En_Di == DISABLE)
 80002d4:	78fb      	ldrb	r3, [r7, #3]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d156      	bne.n	8000388 <GPIO_PeriClkCntrl+0x174>
	{
		if(pGPIOx == GPIOA)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	4a2d      	ldr	r2, [pc, #180]	; (8000394 <GPIO_PeriClkCntrl+0x180>)
 80002de:	4293      	cmp	r3, r2
 80002e0:	d106      	bne.n	80002f0 <GPIO_PeriClkCntrl+0xdc>
		{
			GPIOA_CLK_DI();
 80002e2:	4b2d      	ldr	r3, [pc, #180]	; (8000398 <GPIO_PeriClkCntrl+0x184>)
 80002e4:	691b      	ldr	r3, [r3, #16]
 80002e6:	4a2c      	ldr	r2, [pc, #176]	; (8000398 <GPIO_PeriClkCntrl+0x184>)
 80002e8:	f043 0301 	orr.w	r3, r3, #1
 80002ec:	6113      	str	r3, [r2, #16]
		{
			GPIOH_CLK_DI();
		}
	}

}
 80002ee:	e04b      	b.n	8000388 <GPIO_PeriClkCntrl+0x174>
		else if(pGPIOx == GPIOB)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	4a2a      	ldr	r2, [pc, #168]	; (800039c <GPIO_PeriClkCntrl+0x188>)
 80002f4:	4293      	cmp	r3, r2
 80002f6:	d106      	bne.n	8000306 <GPIO_PeriClkCntrl+0xf2>
			GPIOB_CLK_DI();
 80002f8:	4b27      	ldr	r3, [pc, #156]	; (8000398 <GPIO_PeriClkCntrl+0x184>)
 80002fa:	691b      	ldr	r3, [r3, #16]
 80002fc:	4a26      	ldr	r2, [pc, #152]	; (8000398 <GPIO_PeriClkCntrl+0x184>)
 80002fe:	f043 0302 	orr.w	r3, r3, #2
 8000302:	6113      	str	r3, [r2, #16]
}
 8000304:	e040      	b.n	8000388 <GPIO_PeriClkCntrl+0x174>
		else if(pGPIOx == GPIOC)
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	4a25      	ldr	r2, [pc, #148]	; (80003a0 <GPIO_PeriClkCntrl+0x18c>)
 800030a:	4293      	cmp	r3, r2
 800030c:	d106      	bne.n	800031c <GPIO_PeriClkCntrl+0x108>
			GPIOC_CLK_DI();
 800030e:	4b22      	ldr	r3, [pc, #136]	; (8000398 <GPIO_PeriClkCntrl+0x184>)
 8000310:	691b      	ldr	r3, [r3, #16]
 8000312:	4a21      	ldr	r2, [pc, #132]	; (8000398 <GPIO_PeriClkCntrl+0x184>)
 8000314:	f043 0304 	orr.w	r3, r3, #4
 8000318:	6113      	str	r3, [r2, #16]
}
 800031a:	e035      	b.n	8000388 <GPIO_PeriClkCntrl+0x174>
		else if(pGPIOx == GPIOD)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	4a21      	ldr	r2, [pc, #132]	; (80003a4 <GPIO_PeriClkCntrl+0x190>)
 8000320:	4293      	cmp	r3, r2
 8000322:	d106      	bne.n	8000332 <GPIO_PeriClkCntrl+0x11e>
			GPIOD_CLK_DI();
 8000324:	4b1c      	ldr	r3, [pc, #112]	; (8000398 <GPIO_PeriClkCntrl+0x184>)
 8000326:	691b      	ldr	r3, [r3, #16]
 8000328:	4a1b      	ldr	r2, [pc, #108]	; (8000398 <GPIO_PeriClkCntrl+0x184>)
 800032a:	f043 0308 	orr.w	r3, r3, #8
 800032e:	6113      	str	r3, [r2, #16]
}
 8000330:	e02a      	b.n	8000388 <GPIO_PeriClkCntrl+0x174>
		else if(pGPIOx == GPIOE)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4a1c      	ldr	r2, [pc, #112]	; (80003a8 <GPIO_PeriClkCntrl+0x194>)
 8000336:	4293      	cmp	r3, r2
 8000338:	d106      	bne.n	8000348 <GPIO_PeriClkCntrl+0x134>
			GPIOE_CLK_DI();
 800033a:	4b17      	ldr	r3, [pc, #92]	; (8000398 <GPIO_PeriClkCntrl+0x184>)
 800033c:	691b      	ldr	r3, [r3, #16]
 800033e:	4a16      	ldr	r2, [pc, #88]	; (8000398 <GPIO_PeriClkCntrl+0x184>)
 8000340:	f043 0310 	orr.w	r3, r3, #16
 8000344:	6113      	str	r3, [r2, #16]
}
 8000346:	e01f      	b.n	8000388 <GPIO_PeriClkCntrl+0x174>
		else if(pGPIOx == GPIOF)
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	4a18      	ldr	r2, [pc, #96]	; (80003ac <GPIO_PeriClkCntrl+0x198>)
 800034c:	4293      	cmp	r3, r2
 800034e:	d106      	bne.n	800035e <GPIO_PeriClkCntrl+0x14a>
			GPIOF_CLK_DI();
 8000350:	4b11      	ldr	r3, [pc, #68]	; (8000398 <GPIO_PeriClkCntrl+0x184>)
 8000352:	691b      	ldr	r3, [r3, #16]
 8000354:	4a10      	ldr	r2, [pc, #64]	; (8000398 <GPIO_PeriClkCntrl+0x184>)
 8000356:	f043 0320 	orr.w	r3, r3, #32
 800035a:	6113      	str	r3, [r2, #16]
}
 800035c:	e014      	b.n	8000388 <GPIO_PeriClkCntrl+0x174>
		else if(pGPIOx == GPIOG)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4a13      	ldr	r2, [pc, #76]	; (80003b0 <GPIO_PeriClkCntrl+0x19c>)
 8000362:	4293      	cmp	r3, r2
 8000364:	d106      	bne.n	8000374 <GPIO_PeriClkCntrl+0x160>
			GPIOG_CLK_DI();
 8000366:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <GPIO_PeriClkCntrl+0x184>)
 8000368:	691b      	ldr	r3, [r3, #16]
 800036a:	4a0b      	ldr	r2, [pc, #44]	; (8000398 <GPIO_PeriClkCntrl+0x184>)
 800036c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000370:	6113      	str	r3, [r2, #16]
}
 8000372:	e009      	b.n	8000388 <GPIO_PeriClkCntrl+0x174>
		else if(pGPIOx == GPIOH)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4a0f      	ldr	r2, [pc, #60]	; (80003b4 <GPIO_PeriClkCntrl+0x1a0>)
 8000378:	4293      	cmp	r3, r2
 800037a:	d105      	bne.n	8000388 <GPIO_PeriClkCntrl+0x174>
			GPIOH_CLK_DI();
 800037c:	4b06      	ldr	r3, [pc, #24]	; (8000398 <GPIO_PeriClkCntrl+0x184>)
 800037e:	691b      	ldr	r3, [r3, #16]
 8000380:	4a05      	ldr	r2, [pc, #20]	; (8000398 <GPIO_PeriClkCntrl+0x184>)
 8000382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000386:	6113      	str	r3, [r2, #16]
}
 8000388:	bf00      	nop
 800038a:	370c      	adds	r7, #12
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr
 8000394:	40020000 	.word	0x40020000
 8000398:	40023800 	.word	0x40023800
 800039c:	40020400 	.word	0x40020400
 80003a0:	40020800 	.word	0x40020800
 80003a4:	40020c00 	.word	0x40020c00
 80003a8:	40021000 	.word	0x40021000
 80003ac:	40021400 	.word	0x40021400
 80003b0:	40021800 	.word	0x40021800
 80003b4:	40021c00 	.word	0x40021c00

080003b8 <GPIO_Init>:
 * @return  :
 *
 * @Note	:
 */
void GPIO_Init(GPIO_handle_t *pGPIOHandle)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 80003c0:	2300      	movs	r3, #0
 80003c2:	60fb      	str	r3, [r7, #12]

	//CONFIG RCC FOR THE GPIO PORT
	GPIO_PeriClkCntrl(pGPIOHandle->pGPIOx, ENABLE);
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2101      	movs	r1, #1
 80003ca:	4618      	mov	r0, r3
 80003cc:	f7ff ff22 	bl	8000214 <GPIO_PeriClkCntrl>

	// CONFIGURE THE MODE OF GPIO PIN
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= 3)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	795b      	ldrb	r3, [r3, #5]
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	2b03      	cmp	r3, #3
 80003d8:	d813      	bhi.n	8000402 <GPIO_Init+0x4a>
	{

		temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	795b      	ldrb	r3, [r3, #5]
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	461a      	mov	r2, r3
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	791b      	ldrb	r3, [r3, #4]
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	005b      	lsls	r3, r3, #1
 80003ea:	fa02 f303 	lsl.w	r3, r2, r3
 80003ee:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER |= temp;
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	6819      	ldr	r1, [r3, #0]
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	68fa      	ldr	r2, [r7, #12]
 80003fc:	430a      	orrs	r2, r1
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	e0c7      	b.n	8000592 <GPIO_Init+0x1da>

	}
	else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	795b      	ldrb	r3, [r3, #5]
 8000406:	b2db      	uxtb	r3, r3
 8000408:	2b04      	cmp	r3, #4
 800040a:	d11a      	bne.n	8000442 <GPIO_Init+0x8a>
		{
			//CONFIGURE THE FTSR (FALLING TRIGGER SELECTION REGISTER)
			EXTI->FTSR |= (0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	791b      	ldrb	r3, [r3, #4]
 8000410:	b2db      	uxtb	r3, r3
 8000412:	461a      	mov	r2, r3
 8000414:	2301      	movs	r3, #1
 8000416:	fa03 f202 	lsl.w	r2, r3, r2
 800041a:	4b9f      	ldr	r3, [pc, #636]	; (8000698 <GPIO_Init+0x2e0>)
 800041c:	68db      	ldr	r3, [r3, #12]
 800041e:	4611      	mov	r1, r2
 8000420:	4a9d      	ldr	r2, [pc, #628]	; (8000698 <GPIO_Init+0x2e0>)
 8000422:	430b      	orrs	r3, r1
 8000424:	60d3      	str	r3, [r2, #12]
			//CLEAR RTSR
			EXTI->RTSR &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	791b      	ldrb	r3, [r3, #4]
 800042a:	b2db      	uxtb	r3, r3
 800042c:	461a      	mov	r2, r3
 800042e:	2301      	movs	r3, #1
 8000430:	4093      	lsls	r3, r2
 8000432:	43da      	mvns	r2, r3
 8000434:	4b98      	ldr	r3, [pc, #608]	; (8000698 <GPIO_Init+0x2e0>)
 8000436:	689b      	ldr	r3, [r3, #8]
 8000438:	4611      	mov	r1, r2
 800043a:	4a97      	ldr	r2, [pc, #604]	; (8000698 <GPIO_Init+0x2e0>)
 800043c:	400b      	ands	r3, r1
 800043e:	6093      	str	r3, [r2, #8]
 8000440:	e03e      	b.n	80004c0 <GPIO_Init+0x108>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	795b      	ldrb	r3, [r3, #5]
 8000446:	b2db      	uxtb	r3, r3
 8000448:	2b05      	cmp	r3, #5
 800044a:	d11a      	bne.n	8000482 <GPIO_Init+0xca>
		{
			//CONFIGURE THE RTSR (RISING TRIGGER SELECTION REGISTER
			EXTI->RTSR |= (0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	791b      	ldrb	r3, [r3, #4]
 8000450:	b2db      	uxtb	r3, r3
 8000452:	461a      	mov	r2, r3
 8000454:	2301      	movs	r3, #1
 8000456:	fa03 f202 	lsl.w	r2, r3, r2
 800045a:	4b8f      	ldr	r3, [pc, #572]	; (8000698 <GPIO_Init+0x2e0>)
 800045c:	689b      	ldr	r3, [r3, #8]
 800045e:	4611      	mov	r1, r2
 8000460:	4a8d      	ldr	r2, [pc, #564]	; (8000698 <GPIO_Init+0x2e0>)
 8000462:	430b      	orrs	r3, r1
 8000464:	6093      	str	r3, [r2, #8]
			//CLEAR FTSR
			EXTI->FTSR &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	791b      	ldrb	r3, [r3, #4]
 800046a:	b2db      	uxtb	r3, r3
 800046c:	461a      	mov	r2, r3
 800046e:	2301      	movs	r3, #1
 8000470:	4093      	lsls	r3, r2
 8000472:	43da      	mvns	r2, r3
 8000474:	4b88      	ldr	r3, [pc, #544]	; (8000698 <GPIO_Init+0x2e0>)
 8000476:	68db      	ldr	r3, [r3, #12]
 8000478:	4611      	mov	r1, r2
 800047a:	4a87      	ldr	r2, [pc, #540]	; (8000698 <GPIO_Init+0x2e0>)
 800047c:	400b      	ands	r3, r1
 800047e:	60d3      	str	r3, [r2, #12]
 8000480:	e01e      	b.n	80004c0 <GPIO_Init+0x108>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	795b      	ldrb	r3, [r3, #5]
 8000486:	b2db      	uxtb	r3, r3
 8000488:	2b06      	cmp	r3, #6
 800048a:	d119      	bne.n	80004c0 <GPIO_Init+0x108>
		{
			//CONFIGURE BOTH RTSR AND FTSRpGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
			EXTI->FTSR |= (0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	791b      	ldrb	r3, [r3, #4]
 8000490:	b2db      	uxtb	r3, r3
 8000492:	461a      	mov	r2, r3
 8000494:	2301      	movs	r3, #1
 8000496:	fa03 f202 	lsl.w	r2, r3, r2
 800049a:	4b7f      	ldr	r3, [pc, #508]	; (8000698 <GPIO_Init+0x2e0>)
 800049c:	68db      	ldr	r3, [r3, #12]
 800049e:	4611      	mov	r1, r2
 80004a0:	4a7d      	ldr	r2, [pc, #500]	; (8000698 <GPIO_Init+0x2e0>)
 80004a2:	430b      	orrs	r3, r1
 80004a4:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	791b      	ldrb	r3, [r3, #4]
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	461a      	mov	r2, r3
 80004ae:	2301      	movs	r3, #1
 80004b0:	fa03 f202 	lsl.w	r2, r3, r2
 80004b4:	4b78      	ldr	r3, [pc, #480]	; (8000698 <GPIO_Init+0x2e0>)
 80004b6:	689b      	ldr	r3, [r3, #8]
 80004b8:	4611      	mov	r1, r2
 80004ba:	4a77      	ldr	r2, [pc, #476]	; (8000698 <GPIO_Init+0x2e0>)
 80004bc:	430b      	orrs	r3, r1
 80004be:	6093      	str	r3, [r2, #8]
		}

		//CONFIGURE THE GPIO PORT SELECTION IN SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/2;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	791b      	ldrb	r3, [r3, #4]
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	085b      	lsrs	r3, r3, #1
 80004c8:	72fb      	strb	r3, [r7, #11]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%2;
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	791b      	ldrb	r3, [r3, #4]
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	f003 0301 	and.w	r3, r3, #1
 80004d4:	72bb      	strb	r3, [r7, #10]

		uint8_t portcode = GPIO_BA_CODE(pGPIOHandle->pGPIOx);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a70      	ldr	r2, [pc, #448]	; (800069c <GPIO_Init+0x2e4>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d032      	beq.n	8000546 <GPIO_Init+0x18e>
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a6e      	ldr	r2, [pc, #440]	; (80006a0 <GPIO_Init+0x2e8>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d02b      	beq.n	8000542 <GPIO_Init+0x18a>
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a6d      	ldr	r2, [pc, #436]	; (80006a4 <GPIO_Init+0x2ec>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d024      	beq.n	800053e <GPIO_Init+0x186>
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a6b      	ldr	r2, [pc, #428]	; (80006a8 <GPIO_Init+0x2f0>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d01d      	beq.n	800053a <GPIO_Init+0x182>
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a6a      	ldr	r2, [pc, #424]	; (80006ac <GPIO_Init+0x2f4>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d016      	beq.n	8000536 <GPIO_Init+0x17e>
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a68      	ldr	r2, [pc, #416]	; (80006b0 <GPIO_Init+0x2f8>)
 800050e:	4293      	cmp	r3, r2
 8000510:	d00f      	beq.n	8000532 <GPIO_Init+0x17a>
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a67      	ldr	r2, [pc, #412]	; (80006b4 <GPIO_Init+0x2fc>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d008      	beq.n	800052e <GPIO_Init+0x176>
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a65      	ldr	r2, [pc, #404]	; (80006b8 <GPIO_Init+0x300>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d101      	bne.n	800052a <GPIO_Init+0x172>
 8000526:	2307      	movs	r3, #7
 8000528:	e00e      	b.n	8000548 <GPIO_Init+0x190>
 800052a:	23ff      	movs	r3, #255	; 0xff
 800052c:	e00c      	b.n	8000548 <GPIO_Init+0x190>
 800052e:	2306      	movs	r3, #6
 8000530:	e00a      	b.n	8000548 <GPIO_Init+0x190>
 8000532:	2305      	movs	r3, #5
 8000534:	e008      	b.n	8000548 <GPIO_Init+0x190>
 8000536:	2304      	movs	r3, #4
 8000538:	e006      	b.n	8000548 <GPIO_Init+0x190>
 800053a:	2303      	movs	r3, #3
 800053c:	e004      	b.n	8000548 <GPIO_Init+0x190>
 800053e:	2302      	movs	r3, #2
 8000540:	e002      	b.n	8000548 <GPIO_Init+0x190>
 8000542:	2301      	movs	r3, #1
 8000544:	e000      	b.n	8000548 <GPIO_Init+0x190>
 8000546:	2300      	movs	r3, #0
 8000548:	727b      	strb	r3, [r7, #9]

		SYSCFG_CLK_EN();
 800054a:	4b5c      	ldr	r3, [pc, #368]	; (80006bc <GPIO_Init+0x304>)
 800054c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800054e:	4a5b      	ldr	r2, [pc, #364]	; (80006bc <GPIO_Init+0x304>)
 8000550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000554:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] |= ( portcode << 4*temp2 );
 8000556:	4a5a      	ldr	r2, [pc, #360]	; (80006c0 <GPIO_Init+0x308>)
 8000558:	7afb      	ldrb	r3, [r7, #11]
 800055a:	3302      	adds	r3, #2
 800055c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000560:	7a79      	ldrb	r1, [r7, #9]
 8000562:	7abb      	ldrb	r3, [r7, #10]
 8000564:	009b      	lsls	r3, r3, #2
 8000566:	fa01 f303 	lsl.w	r3, r1, r3
 800056a:	4618      	mov	r0, r3
 800056c:	4954      	ldr	r1, [pc, #336]	; (80006c0 <GPIO_Init+0x308>)
 800056e:	7afb      	ldrb	r3, [r7, #11]
 8000570:	4302      	orrs	r2, r0
 8000572:	3302      	adds	r3, #2
 8000574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


		//ENABLE THE EXTI INTERRUPT DELIVERY USING IMR
		EXTI->IMR |= (0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	791b      	ldrb	r3, [r3, #4]
 800057c:	b2db      	uxtb	r3, r3
 800057e:	461a      	mov	r2, r3
 8000580:	2301      	movs	r3, #1
 8000582:	fa03 f202 	lsl.w	r2, r3, r2
 8000586:	4b44      	ldr	r3, [pc, #272]	; (8000698 <GPIO_Init+0x2e0>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4611      	mov	r1, r2
 800058c:	4a42      	ldr	r2, [pc, #264]	; (8000698 <GPIO_Init+0x2e0>)
 800058e:	430b      	orrs	r3, r1
 8000590:	6013      	str	r3, [r2, #0]

	}

	temp = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
	// CONFIGURE THE SPEED
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	799b      	ldrb	r3, [r3, #6]
 800059a:	b2db      	uxtb	r3, r3
 800059c:	461a      	mov	r2, r3
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	791b      	ldrb	r3, [r3, #4]
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	fa02 f303 	lsl.w	r3, r2, r3
 80005aa:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	6899      	ldr	r1, [r3, #8]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	68fa      	ldr	r2, [r7, #12]
 80005b8:	430a      	orrs	r2, r1
 80005ba:	609a      	str	r2, [r3, #8]

	temp = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	60fb      	str	r3, [r7, #12]
	// CONFIGURE THE PUPD SETTINGS
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	79db      	ldrb	r3, [r3, #7]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	461a      	mov	r2, r3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	791b      	ldrb	r3, [r3, #4]
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	005b      	lsls	r3, r3, #1
 80005d0:	fa02 f303 	lsl.w	r3, r2, r3
 80005d4:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	68d9      	ldr	r1, [r3, #12]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	68fa      	ldr	r2, [r7, #12]
 80005e2:	430a      	orrs	r2, r1
 80005e4:	60da      	str	r2, [r3, #12]

	temp = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
	// CONFIGURE THE OPTYPE
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	7a1b      	ldrb	r3, [r3, #8]
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	461a      	mov	r2, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	791b      	ldrb	r3, [r3, #4]
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	fa02 f303 	lsl.w	r3, r2, r3
 80005fc:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	6859      	ldr	r1, [r3, #4]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	68fa      	ldr	r2, [r7, #12]
 800060a:	430a      	orrs	r2, r1
 800060c:	605a      	str	r2, [r3, #4]

	temp = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]
	// CONFIGURE THE ALTERNATE FUNCTIONALITY OF THE PIN
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_ALT_FN)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	795b      	ldrb	r3, [r3, #5]
 8000616:	b2db      	uxtb	r3, r3
 8000618:	2b02      	cmp	r3, #2
 800061a:	f040 8094 	bne.w	8000746 <GPIO_Init+0x38e>
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= 3)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	791b      	ldrb	r3, [r3, #4]
 8000622:	b2db      	uxtb	r3, r3
 8000624:	2b03      	cmp	r3, #3
 8000626:	d815      	bhi.n	8000654 <GPIO_Init+0x29c>
		{
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4)));
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	7a5b      	ldrb	r3, [r3, #9]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	461a      	mov	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	791b      	ldrb	r3, [r3, #4]
 8000634:	b2db      	uxtb	r3, r3
 8000636:	f003 0303 	and.w	r3, r3, #3
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	fa02 f303 	lsl.w	r3, r2, r3
 8000640:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->AFR[0] |= temp;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	6a19      	ldr	r1, [r3, #32]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	68fa      	ldr	r2, [r7, #12]
 800064e:	430a      	orrs	r2, r1
 8000650:	621a      	str	r2, [r3, #32]
		{
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (16 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4)));
			pGPIOHandle->pGPIOx->AFR[1] |= temp;
		}
	}
}
 8000652:	e078      	b.n	8000746 <GPIO_Init+0x38e>
		else if((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= 7) && (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber > 3))
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	791b      	ldrb	r3, [r3, #4]
 8000658:	b2db      	uxtb	r3, r3
 800065a:	2b07      	cmp	r3, #7
 800065c:	d832      	bhi.n	80006c4 <GPIO_Init+0x30c>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	791b      	ldrb	r3, [r3, #4]
 8000662:	b2db      	uxtb	r3, r3
 8000664:	2b03      	cmp	r3, #3
 8000666:	d92d      	bls.n	80006c4 <GPIO_Init+0x30c>
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (16 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4)));
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	7a5b      	ldrb	r3, [r3, #9]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	461a      	mov	r2, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	791b      	ldrb	r3, [r3, #4]
 8000674:	b2db      	uxtb	r3, r3
 8000676:	f003 0303 	and.w	r3, r3, #3
 800067a:	3304      	adds	r3, #4
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	fa02 f303 	lsl.w	r3, r2, r3
 8000682:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->AFR[0] |= temp;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	6a19      	ldr	r1, [r3, #32]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	68fa      	ldr	r2, [r7, #12]
 8000690:	430a      	orrs	r2, r1
 8000692:	621a      	str	r2, [r3, #32]
 8000694:	e057      	b.n	8000746 <GPIO_Init+0x38e>
 8000696:	bf00      	nop
 8000698:	40013c00 	.word	0x40013c00
 800069c:	40020000 	.word	0x40020000
 80006a0:	40020400 	.word	0x40020400
 80006a4:	40020800 	.word	0x40020800
 80006a8:	40020c00 	.word	0x40020c00
 80006ac:	40021000 	.word	0x40021000
 80006b0:	40021400 	.word	0x40021400
 80006b4:	40021800 	.word	0x40021800
 80006b8:	40021c00 	.word	0x40021c00
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40013800 	.word	0x40013800
		else if((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= 11) && (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber > 7))
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	791b      	ldrb	r3, [r3, #4]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	2b0b      	cmp	r3, #11
 80006cc:	d81a      	bhi.n	8000704 <GPIO_Init+0x34c>
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	791b      	ldrb	r3, [r3, #4]
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	2b07      	cmp	r3, #7
 80006d6:	d915      	bls.n	8000704 <GPIO_Init+0x34c>
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4)));
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	7a5b      	ldrb	r3, [r3, #9]
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	461a      	mov	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	791b      	ldrb	r3, [r3, #4]
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	f003 0303 	and.w	r3, r3, #3
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	fa02 f303 	lsl.w	r3, r2, r3
 80006f0:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->AFR[1] |= temp;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	68fa      	ldr	r2, [r7, #12]
 80006fe:	430a      	orrs	r2, r1
 8000700:	625a      	str	r2, [r3, #36]	; 0x24
 8000702:	e020      	b.n	8000746 <GPIO_Init+0x38e>
		else if((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= 15) && (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber > 11))
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	791b      	ldrb	r3, [r3, #4]
 8000708:	b2db      	uxtb	r3, r3
 800070a:	2b0f      	cmp	r3, #15
 800070c:	d81b      	bhi.n	8000746 <GPIO_Init+0x38e>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	791b      	ldrb	r3, [r3, #4]
 8000712:	b2db      	uxtb	r3, r3
 8000714:	2b0b      	cmp	r3, #11
 8000716:	d916      	bls.n	8000746 <GPIO_Init+0x38e>
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (16 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4)));
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	7a5b      	ldrb	r3, [r3, #9]
 800071c:	b2db      	uxtb	r3, r3
 800071e:	461a      	mov	r2, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	791b      	ldrb	r3, [r3, #4]
 8000724:	b2db      	uxtb	r3, r3
 8000726:	f003 0303 	and.w	r3, r3, #3
 800072a:	3304      	adds	r3, #4
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	fa02 f303 	lsl.w	r3, r2, r3
 8000732:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->AFR[1] |= temp;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	68fa      	ldr	r2, [r7, #12]
 8000740:	430a      	orrs	r2, r1
 8000742:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000744:	e7ff      	b.n	8000746 <GPIO_Init+0x38e>
 8000746:	bf00      	nop
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop

08000750 <GPIO_ReadIPin>:
 * @return  :
 *
 * @Note	:
 */
uint8_t GPIO_ReadIPin(GPIO_regdef_t *pGPIOx, uint8_t Pin_No)
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	460b      	mov	r3, r1
 800075a:	70fb      	strb	r3, [r7, #3]

	uint8_t temp;

	temp = (uint8_t)( (pGPIOx->IDR >> Pin_No) & 0x00000001);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	691a      	ldr	r2, [r3, #16]
 8000760:	78fb      	ldrb	r3, [r7, #3]
 8000762:	fa22 f303 	lsr.w	r3, r2, r3
 8000766:	b2db      	uxtb	r3, r3
 8000768:	f003 0301 	and.w	r3, r3, #1
 800076c:	73fb      	strb	r3, [r7, #15]

	return(temp);
 800076e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000770:	4618      	mov	r0, r3
 8000772:	3714      	adds	r7, #20
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <SPI_GetFagStatus>:
static void SPI_RXNE_IT_Handle(SPI_Handle_t *pSPIHandle);
static void SPI_TXE_IT_Handle(SPI_Handle_t *pSPIHandle);
static void SPI_OVR_IT_Handle(SPI_Handle_t *pSPIHandle);

uint8_t SPI_GetFagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	689a      	ldr	r2, [r3, #8]
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	4013      	ands	r3, r2
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SPI_GetFagStatus+0x1a>
	{
		return FLAG_SET;
 8000792:	2301      	movs	r3, #1
 8000794:	e000      	b.n	8000798 <SPI_GetFagStatus+0x1c>
	}
	return FLAG_RESET;
 8000796:	2300      	movs	r3, #0
}
 8000798:	4618      	mov	r0, r3
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <SPI_Enable>:

void SPI_Enable(SPI_RegDef_t *SPI_ENDI, uint8_t EN_DI)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	460b      	mov	r3, r1
 80007ae:	70fb      	strb	r3, [r7, #3]
	if(EN_DI == ENABLE)
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d106      	bne.n	80007c4 <SPI_Enable+0x20>
	{
		SPI_ENDI->CR1 |=  (0x1 << SPIEN);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	601a      	str	r2, [r3, #0]
	}else
	{
		SPI_ENDI->CR1 &= ~(0x1 << SPIEN);
	}
}
 80007c2:	e005      	b.n	80007d0 <SPI_Enable+0x2c>
		SPI_ENDI->CR1 &= ~(0x1 << SPIEN);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	601a      	str	r2, [r3, #0]
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <SSOE_Config>:
	}

}

void SSOE_Config(SPI_RegDef_t *SPI_ENDI, uint8_t EN_DI)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	460b      	mov	r3, r1
 80007e6:	70fb      	strb	r3, [r7, #3]

	if(EN_DI == ENABLE)
 80007e8:	78fb      	ldrb	r3, [r7, #3]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d106      	bne.n	80007fc <SSOE_Config+0x20>
	{
		SPI_ENDI->CR2 |=  (0x1 << SSOEEN);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	f043 0204 	orr.w	r2, r3, #4
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	605a      	str	r2, [r3, #4]
	}else
	{
		SPI_ENDI->CR2 &= ~(0x1 << SSOEEN);
	}
}
 80007fa:	e005      	b.n	8000808 <SSOE_Config+0x2c>
		SPI_ENDI->CR2 &= ~(0x1 << SSOEEN);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	f023 0204 	bic.w	r2, r3, #4
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	605a      	str	r2, [r3, #4]
}
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <SPI_PeriClkCntrl>:
 * @return  :
 *
 * @Note	:
 */
void SPI_PeriClkCntrl(SPI_RegDef_t *pSPIx, uint8_t En_Di)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	460b      	mov	r3, r1
 800081e:	70fb      	strb	r3, [r7, #3]

	if(En_Di == ENABLE)
 8000820:	78fb      	ldrb	r3, [r7, #3]
 8000822:	2b01      	cmp	r3, #1
 8000824:	d12b      	bne.n	800087e <SPI_PeriClkCntrl+0x6a>
	{
		if(pSPIx == SPI1)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4a2f      	ldr	r2, [pc, #188]	; (80008e8 <SPI_PeriClkCntrl+0xd4>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d106      	bne.n	800083c <SPI_PeriClkCntrl+0x28>
		{
			SPI1_CLK_EN();
 800082e:	4b2f      	ldr	r3, [pc, #188]	; (80008ec <SPI_PeriClkCntrl+0xd8>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000832:	4a2e      	ldr	r2, [pc, #184]	; (80008ec <SPI_PeriClkCntrl+0xd8>)
 8000834:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000838:	6453      	str	r3, [r2, #68]	; 0x44
		{
			SPI4_CLK_DI();
		}

	}
}
 800083a:	e04e      	b.n	80008da <SPI_PeriClkCntrl+0xc6>
		else if(pSPIx == SPI2)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4a2c      	ldr	r2, [pc, #176]	; (80008f0 <SPI_PeriClkCntrl+0xdc>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d106      	bne.n	8000852 <SPI_PeriClkCntrl+0x3e>
			SPI2_CLK_EN();
 8000844:	4b29      	ldr	r3, [pc, #164]	; (80008ec <SPI_PeriClkCntrl+0xd8>)
 8000846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000848:	4a28      	ldr	r2, [pc, #160]	; (80008ec <SPI_PeriClkCntrl+0xd8>)
 800084a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000850:	e043      	b.n	80008da <SPI_PeriClkCntrl+0xc6>
		else if(pSPIx == SPI3)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4a27      	ldr	r2, [pc, #156]	; (80008f4 <SPI_PeriClkCntrl+0xe0>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d106      	bne.n	8000868 <SPI_PeriClkCntrl+0x54>
			SPI3_CLK_EN();
 800085a:	4b24      	ldr	r3, [pc, #144]	; (80008ec <SPI_PeriClkCntrl+0xd8>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	4a23      	ldr	r2, [pc, #140]	; (80008ec <SPI_PeriClkCntrl+0xd8>)
 8000860:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000864:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000866:	e038      	b.n	80008da <SPI_PeriClkCntrl+0xc6>
		else if(pSPIx == SPI4)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4a23      	ldr	r2, [pc, #140]	; (80008f8 <SPI_PeriClkCntrl+0xe4>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d134      	bne.n	80008da <SPI_PeriClkCntrl+0xc6>
			SPI4_CLK_EN();
 8000870:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <SPI_PeriClkCntrl+0xd8>)
 8000872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000874:	4a1d      	ldr	r2, [pc, #116]	; (80008ec <SPI_PeriClkCntrl+0xd8>)
 8000876:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800087a:	6453      	str	r3, [r2, #68]	; 0x44
}
 800087c:	e02d      	b.n	80008da <SPI_PeriClkCntrl+0xc6>
	else if(En_Di == DISABLE)
 800087e:	78fb      	ldrb	r3, [r7, #3]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d12a      	bne.n	80008da <SPI_PeriClkCntrl+0xc6>
		if(pSPIx == SPI1)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4a18      	ldr	r2, [pc, #96]	; (80008e8 <SPI_PeriClkCntrl+0xd4>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d106      	bne.n	800089a <SPI_PeriClkCntrl+0x86>
			SPI1_CLK_DI();
 800088c:	4b17      	ldr	r3, [pc, #92]	; (80008ec <SPI_PeriClkCntrl+0xd8>)
 800088e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000890:	4a16      	ldr	r2, [pc, #88]	; (80008ec <SPI_PeriClkCntrl+0xd8>)
 8000892:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000896:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000898:	e01f      	b.n	80008da <SPI_PeriClkCntrl+0xc6>
		else if(pSPIx == SPI2)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4a14      	ldr	r2, [pc, #80]	; (80008f0 <SPI_PeriClkCntrl+0xdc>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d106      	bne.n	80008b0 <SPI_PeriClkCntrl+0x9c>
			SPI2_CLK_DI();
 80008a2:	4b12      	ldr	r3, [pc, #72]	; (80008ec <SPI_PeriClkCntrl+0xd8>)
 80008a4:	6a1b      	ldr	r3, [r3, #32]
 80008a6:	4a11      	ldr	r2, [pc, #68]	; (80008ec <SPI_PeriClkCntrl+0xd8>)
 80008a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ac:	6213      	str	r3, [r2, #32]
}
 80008ae:	e014      	b.n	80008da <SPI_PeriClkCntrl+0xc6>
		else if(pSPIx == SPI3)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4a10      	ldr	r2, [pc, #64]	; (80008f4 <SPI_PeriClkCntrl+0xe0>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d106      	bne.n	80008c6 <SPI_PeriClkCntrl+0xb2>
			SPI3_CLK_DI();
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <SPI_PeriClkCntrl+0xd8>)
 80008ba:	6a1b      	ldr	r3, [r3, #32]
 80008bc:	4a0b      	ldr	r2, [pc, #44]	; (80008ec <SPI_PeriClkCntrl+0xd8>)
 80008be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008c2:	6213      	str	r3, [r2, #32]
}
 80008c4:	e009      	b.n	80008da <SPI_PeriClkCntrl+0xc6>
		else if(pSPIx == SPI4)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4a0b      	ldr	r2, [pc, #44]	; (80008f8 <SPI_PeriClkCntrl+0xe4>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d105      	bne.n	80008da <SPI_PeriClkCntrl+0xc6>
			SPI4_CLK_DI();
 80008ce:	4b07      	ldr	r3, [pc, #28]	; (80008ec <SPI_PeriClkCntrl+0xd8>)
 80008d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008d2:	4a06      	ldr	r2, [pc, #24]	; (80008ec <SPI_PeriClkCntrl+0xd8>)
 80008d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008d8:	6253      	str	r3, [r2, #36]	; 0x24
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40013000 	.word	0x40013000
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40003800 	.word	0x40003800
 80008f4:	40003c00 	.word	0x40003c00
 80008f8:	40013400 	.word	0x40013400

080008fc <SPI_Init>:
 * @return  :
 *
 * @Note	:
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)									//INITIALIZES SPI PORT
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]

	//ENABLE CLOCK FOR THE SPI PERIPHERAL
	SPI_PeriClkCntrl(pSPIHandle->pSPIx, ENABLE);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2101      	movs	r1, #1
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff ff82 	bl	8000814 <SPI_PeriClkCntrl>

	//FIRST CONFIGURE THE SPI_CR1 REG

	uint32_t temp = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]

	//CONFIGURE THE DEVICE MODE
	temp = (pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	791b      	ldrb	r3, [r3, #4]
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	60fb      	str	r3, [r7, #12]

	//CONFIGURE THE BUS MODE
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	795b      	ldrb	r3, [r3, #5]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d104      	bne.n	800092e <SPI_Init+0x32>
	{
		//BIDIMODE IS CLEARED TO ENABLE BIDIRECTIONAL MODE
		temp &= ~(1 << SPI_CR1_BIDIMODE);
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	e014      	b.n	8000958 <SPI_Init+0x5c>

	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	795b      	ldrb	r3, [r3, #5]
 8000932:	2b02      	cmp	r3, #2
 8000934:	d104      	bne.n	8000940 <SPI_Init+0x44>
	{
		//BIDIMODE IS SET TO DISABLE BIDIRECTIONAL MODE
		temp |= (1 << SPI_CR1_BIDIOE);
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	e00b      	b.n	8000958 <SPI_Init+0x5c>

	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_Rx)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	795b      	ldrb	r3, [r3, #5]
 8000944:	2b03      	cmp	r3, #3
 8000946:	d107      	bne.n	8000958 <SPI_Init+0x5c>
	{
		//BIDIMODE IS CLEARED TO ENABLE BIDIRECTIONAL MODE
		temp &= ~(1 << SPI_CR1_BIDIMODE);
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800094e:	60fb      	str	r3, [r7, #12]

		//RXONLY IS SET TO ENABLE RECIEVE ONLY IN MASTER
		temp |= (1 << SPI_CR1_RXONLY);
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000956:	60fb      	str	r3, [r7, #12]

	}

	//CONFIGURE THE CLOCK SPEED OF THE SPIx
	temp |= (pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	799b      	ldrb	r3, [r3, #6]
 800095c:	00db      	lsls	r3, r3, #3
 800095e:	461a      	mov	r2, r3
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	4313      	orrs	r3, r2
 8000964:	60fb      	str	r3, [r7, #12]

	//CONFIGURE THE DATA FRAME FORMAT
	temp |= (pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	79db      	ldrb	r3, [r3, #7]
 800096a:	02db      	lsls	r3, r3, #11
 800096c:	461a      	mov	r2, r3
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	4313      	orrs	r3, r2
 8000972:	60fb      	str	r3, [r7, #12]

	//CONGFIGURE THE CLOCK POLARITY
	temp |= (pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	7a1b      	ldrb	r3, [r3, #8]
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	461a      	mov	r2, r3
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	4313      	orrs	r3, r2
 8000980:	60fb      	str	r3, [r7, #12]

	//CONFIGURE THE CLOCK PHASE
	temp |= (pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	7a5b      	ldrb	r3, [r3, #9]
 8000986:	461a      	mov	r2, r3
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	4313      	orrs	r3, r2
 800098c:	60fb      	str	r3, [r7, #12]

	//CONFIG S/W SLAVE MANAGEMENT
	temp |= (pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	7a9b      	ldrb	r3, [r3, #10]
 8000992:	025b      	lsls	r3, r3, #9
 8000994:	461a      	mov	r2, r3
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	4313      	orrs	r3, r2
 800099a:	60fb      	str	r3, [r7, #12]


	//SAVE THE CONFIGURATION VARIABLE IN THE CR REGISTER

	pSPIHandle->pSPIx->CR1 |= temp;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	6819      	ldr	r1, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	430a      	orrs	r2, r1
 80009aa:	601a      	str	r2, [r3, #0]

}
 80009ac:	bf00      	nop
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <SPI_SendData>:
 *
 * @Note	:	THIS IS BLOCKING CALL / POLLING BASED
 */

void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTXBuffer, uint32_t Len)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	607a      	str	r2, [r7, #4]

	//SEND INFO ABOUT THE LENGTH
	//pSPIx->DR = Len;

	//CHECK FOR THE LENGTH VARIABLE -- EXIT IF 0
	while(Len != 0)
 80009c0:	e02a      	b.n	8000a18 <SPI_SendData+0x64>
	{
		//WAIT UNTIL TX BUFFER IS EMPTY -- CHECK TXE
		while( SPI_GetFagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET );
 80009c2:	bf00      	nop
 80009c4:	2102      	movs	r1, #2
 80009c6:	68f8      	ldr	r0, [r7, #12]
 80009c8:	f7ff fed8 	bl	800077c <SPI_GetFagStatus>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d0f8      	beq.n	80009c4 <SPI_SendData+0x10>

		//ONCE TX BUFFER IS EMPTY -- CHECK DFF
		if( !(pSPIx->CR1 & (0x1 << SPI_CR1_DFF)) )
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d10b      	bne.n	80009f6 <SPI_SendData+0x42>
		{

			//ONCE DFF IS CHECKED -- LOAD DR WITH 1 BYTE DATA
			pSPIx->DR = *pTXBuffer;
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	461a      	mov	r2, r3
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	60da      	str	r2, [r3, #12]

			//INCREMENT THE BUFFER ADDRESS
			pTXBuffer++;
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	3301      	adds	r3, #1
 80009ec:	60bb      	str	r3, [r7, #8]

			//DECREMENT THE LENGTH
			Len--;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	3b01      	subs	r3, #1
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	e010      	b.n	8000a18 <SPI_SendData+0x64>

		}else if(pSPIx->CR1 & (0x1 << SPI_CR1_DFF))
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d00a      	beq.n	8000a18 <SPI_SendData+0x64>
		{

			//ONCE DFF IS CHECKED -- LOAD DR WITH 2 BYTE DATA
			pSPIx->DR = *((uint16_t *)pTXBuffer);
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	461a      	mov	r2, r3
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	60da      	str	r2, [r3, #12]

			//INCREMENT THE BUFFER ADDRESS
			(uint16_t *)pTXBuffer++;
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	60bb      	str	r3, [r7, #8]

			//DECREMENT THE LENGTH
			Len -= 2;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	3b02      	subs	r3, #2
 8000a16:	607b      	str	r3, [r7, #4]
	while(Len != 0)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d1d1      	bne.n	80009c2 <SPI_SendData+0xe>

		}

	}

}
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <SPI_RecieveData>:
 * @return  :
 *
 * @Note	:
 */
void SPI_RecieveData(SPI_RegDef_t *pSPIx, uint8_t *pRXBuffer, uint32_t Len)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b084      	sub	sp, #16
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	60f8      	str	r0, [r7, #12]
 8000a2e:	60b9      	str	r1, [r7, #8]
 8000a30:	607a      	str	r2, [r7, #4]

	//CHECK IF LENGTH  == 0 -- EXIT IF LENGTH = 0 i.e. DATA RECEIVED COMPLETELY
	while(Len != 0)
 8000a32:	e024      	b.n	8000a7e <SPI_RecieveData+0x58>
	{
		//WAIT UNTIL Rx BUFFER HAS NOT RECEIVED DATA
		while(SPI_GetFagStatus(pSPIx, SPI_RXNE_FLAG) != FLAG_SET);
 8000a34:	bf00      	nop
 8000a36:	2101      	movs	r1, #1
 8000a38:	68f8      	ldr	r0, [r7, #12]
 8000a3a:	f7ff fe9f 	bl	800077c <SPI_GetFagStatus>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d1f8      	bne.n	8000a36 <SPI_RecieveData+0x10>

		//ONCE DATA IS RECEIVED IN THE BUFFER THE RXNE FLAG IS SET AND NOW READ THE DATA FROM DR
		if( !(pSPIx->CR1 & (0x1 << SPI_CR1_DFF)) )
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d10b      	bne.n	8000a68 <SPI_RecieveData+0x42>
		{

			//ONCE DFF IS CHECKED  -- LOAD WITH 1 BYTE OF DATA
			*pRXBuffer = pSPIx->DR;
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	701a      	strb	r2, [r3, #0]

			//INCREMENT THE BUFFER ADDRESS
			pRXBuffer++;
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	60bb      	str	r3, [r7, #8]

			//DECREMENT THE LENGTH
			Len--;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	e00a      	b.n	8000a7e <SPI_RecieveData+0x58>
		}
		else
		{
			//ONCE DFF IS CHECKED  -- LOAD WITH 2 BYTE OF DATA
			*((uint16_t *)pRXBuffer) = pSPIx->DR;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	801a      	strh	r2, [r3, #0]

			//INCREMENT THE BUFFER ADDRESS
			(uint16_t *)pRXBuffer++;
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	3301      	adds	r3, #1
 8000a76:	60bb      	str	r3, [r7, #8]

			//DECREMENT THE LENGTH
			Len -= 2;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	3b02      	subs	r3, #2
 8000a7c:	607b      	str	r3, [r7, #4]
	while(Len != 0)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d1d7      	bne.n	8000a34 <SPI_RecieveData+0xe>
		}

	}
}
 8000a84:	bf00      	nop
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <delay>:
void delay(int i);
void SPI2_GPIOInits();
void SPI2_Inits();

void delay(int i)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	for( int x = i; i < x*100000 ; i ++);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	e002      	b.n	8000aa0 <delay+0x14>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	4a06      	ldr	r2, [pc, #24]	; (8000abc <delay+0x30>)
 8000aa4:	fb02 f303 	mul.w	r3, r2, r3
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	dbf5      	blt.n	8000a9a <delay+0xe>
}
 8000aae:	bf00      	nop
 8000ab0:	3714      	adds	r7, #20
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	000186a0 	.word	0x000186a0

08000ac0 <SPI2_GPIOInits>:

void SPI2_GPIOInits()
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0

	GPIO_handle_t SPI_pin ;
	memset(&SPI_pin, 	0,	sizeof(SPI_pin));
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	220c      	movs	r2, #12
 8000aca:	2100      	movs	r1, #0
 8000acc:	4618      	mov	r0, r3
 8000ace:	f000 fa69 	bl	8000fa4 <memset>

	SPI_pin.pGPIOx = GPIOB;
 8000ad2:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <SPI2_GPIOInits+0x64>)
 8000ad4:	607b      	str	r3, [r7, #4]
	SPI_pin.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000ad6:	2305      	movs	r3, #5
 8000ad8:	737b      	strb	r3, [r7, #13]
	SPI_pin.GPIO_PinConfig.GPIO_PinMode = GPIO_ALT_FN;
 8000ada:	2302      	movs	r3, #2
 8000adc:	727b      	strb	r3, [r7, #9]
	SPI_pin.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	733b      	strb	r3, [r7, #12]
	SPI_pin.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	72bb      	strb	r3, [r7, #10]
	SPI_pin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	72fb      	strb	r3, [r7, #11]

	//NSS
	SPI_pin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 8000aea:	230c      	movs	r3, #12
 8000aec:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_pin);
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fc61 	bl	80003b8 <GPIO_Init>

	//SCK
	SPI_pin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 8000af6:	230d      	movs	r3, #13
 8000af8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_pin);
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fc5b 	bl	80003b8 <GPIO_Init>

	//MISO
	SPI_pin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_14;
 8000b02:	230e      	movs	r3, #14
 8000b04:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_pin);
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fc55 	bl	80003b8 <GPIO_Init>

	//MOSI
	SPI_pin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_15;
 8000b0e:	230f      	movs	r3, #15
 8000b10:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_pin);
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fc4f 	bl	80003b8 <GPIO_Init>

}
 8000b1a:	bf00      	nop
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40020400 	.word	0x40020400

08000b28 <SPI2_Inits>:

void SPI2_Inits()
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2Handle;
	memset(&SPI2Handle, 0, sizeof(SPI2Handle));
 8000b2e:	463b      	mov	r3, r7
 8000b30:	2220      	movs	r2, #32
 8000b32:	2100      	movs	r1, #0
 8000b34:	4618      	mov	r0, r3
 8000b36:	f000 fa35 	bl	8000fa4 <memset>

	SPI2Handle.pSPIx = SPI2;
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <SPI2_Inits+0x44>)
 8000b3c:	603b      	str	r3, [r7, #0]

	SPI2Handle.SPIConfig.SPI_BusConfig 	= SPI_BUS_CONFIG_FD;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	717b      	strb	r3, [r7, #5]
	SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_MODE_MASTER;
 8000b42:	2301      	movs	r3, #1
 8000b44:	713b      	strb	r3, [r7, #4]
	SPI2Handle.SPIConfig.SPI_DFF 		= SPI_DFF_8;
 8000b46:	2300      	movs	r3, #0
 8000b48:	71fb      	strb	r3, [r7, #7]
	SPI2Handle.SPIConfig.SPI_SclkSpeed 	= SPI_SCLK_SPEED_DIV8;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	71bb      	strb	r3, [r7, #6]
	SPI2Handle.SPIConfig.SPI_SSM 		= SPI_SSM_DI;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	72bb      	strb	r3, [r7, #10]
	SPI2Handle.SPIConfig.SPI_CPOL       = SPI_CPOL_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	723b      	strb	r3, [r7, #8]
	SPI2Handle.SPIConfig.SPI_CPHA		= SPI_CPHA_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	727b      	strb	r3, [r7, #9]

	SPI_Init(&SPI2Handle);
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff fecd 	bl	80008fc <SPI_Init>

}
 8000b62:	bf00      	nop
 8000b64:	3720      	adds	r7, #32
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40003800 	.word	0x40003800

08000b70 <SPI_Verify>:

uint8_t SPI_Verify(int response)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
	if(response == 0xF5)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2bf5      	cmp	r3, #245	; 0xf5
 8000b7c:	d101      	bne.n	8000b82 <SPI_Verify+0x12>
	{
		//ACK
		return 1;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e000      	b.n	8000b84 <SPI_Verify+0x14>
	}
	else{
		//NACK
		return 0;
 8000b82:	2300      	movs	r3, #0
	}
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <main>:

int main()
{
 8000b90:	b5b0      	push	{r4, r5, r7, lr}
 8000b92:	b08c      	sub	sp, #48	; 0x30
 8000b94:	af00      	add	r7, sp, #0
	uint8_t dummy_write = 0xff, dummy_read, analog_read;
 8000b96:	23ff      	movs	r3, #255	; 0xff
 8000b98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t rec_byte;
	uint8_t args[2];

	GPIO_handle_t buttonPin;
	buttonPin.pGPIOx = GPIOC;
 8000b9c:	4bd7      	ldr	r3, [pc, #860]	; (8000efc <main+0x36c>)
 8000b9e:	61bb      	str	r3, [r7, #24]
	buttonPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	777b      	strb	r3, [r7, #29]
	buttonPin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 8000ba4:	230d      	movs	r3, #13
 8000ba6:	773b      	strb	r3, [r7, #28]
	buttonPin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	77fb      	strb	r3, [r7, #31]
	buttonPin.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000bac:	2302      	movs	r3, #2
 8000bae:	77bb      	strb	r3, [r7, #30]
	GPIO_Init(&buttonPin);
 8000bb0:	f107 0318 	add.w	r3, r7, #24
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff fbff 	bl	80003b8 <GPIO_Init>

	SPI2_GPIOInits();
 8000bba:	f7ff ff81 	bl	8000ac0 <SPI2_GPIOInits>
	SPI2_Inits();
 8000bbe:	f7ff ffb3 	bl	8000b28 <SPI2_Inits>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SSOE_Config(SPI2, ENABLE);
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	48ce      	ldr	r0, [pc, #824]	; (8000f00 <main+0x370>)
 8000bc6:	f7ff fe09 	bl	80007dc <SSOE_Config>

	while(1)
	{
		//WAIT TILL BUTTON IS PRESSED
		while( (GPIO_ReadIPin(GPIOC, GPIO_PIN_13)) );
 8000bca:	bf00      	nop
 8000bcc:	210d      	movs	r1, #13
 8000bce:	48cb      	ldr	r0, [pc, #812]	; (8000efc <main+0x36c>)
 8000bd0:	f7ff fdbe 	bl	8000750 <GPIO_ReadIPin>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d1f8      	bne.n	8000bcc <main+0x3c>

		//DELAY TO COMPENSATE BUTTON DEBOUNCING
		delay(3);
 8000bda:	2003      	movs	r0, #3
 8000bdc:	f7ff ff56 	bl	8000a8c <delay>

		//ENABLE THE SPI2 PERIPHERAL
		SPI_Enable(SPI2, ENABLE);
 8000be0:	2101      	movs	r1, #1
 8000be2:	48c7      	ldr	r0, [pc, #796]	; (8000f00 <main+0x370>)
 8000be4:	f7ff fdde 	bl	80007a4 <SPI_Enable>

		//1. CMD_LED_CTRL  <PIN_NO>		<VALUE>
		uint8_t CmndCode = COMMAND_LED_CTRL;
 8000be8:	2350      	movs	r3, #80	; 0x50
 8000bea:	75fb      	strb	r3, [r7, #23]

		//SEND THE DATA TO THE ARDUINO SLAVE
		SPI_SendData(SPI2, &CmndCode, 1);
 8000bec:	f107 0317 	add.w	r3, r7, #23
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	48c2      	ldr	r0, [pc, #776]	; (8000f00 <main+0x370>)
 8000bf6:	f7ff fedd 	bl	80009b4 <SPI_SendData>

		//READ THE DUMMY VAR RECEIVED -- IF NOT READ IT WILL SET THE RXNE BIT
		SPI_RecieveData(SPI2, &dummy_read, 1);
 8000bfa:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8000bfe:	2201      	movs	r2, #1
 8000c00:	4619      	mov	r1, r3
 8000c02:	48bf      	ldr	r0, [pc, #764]	; (8000f00 <main+0x370>)
 8000c04:	f7ff ff0f 	bl	8000a26 <SPI_RecieveData>

		//SEND DUMMY DATA TO FETCH THE RESPONSE FROM THE SLAVE -- THE SLAVE WILL NOT INITIATE DATA TRANSFER THE MASTER HAS TO FETCH
		//BY SENDING DUMMY DATA
		SPI_SendData(SPI2, &dummy_write, 1);
 8000c08:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	4619      	mov	r1, r3
 8000c10:	48bb      	ldr	r0, [pc, #748]	; (8000f00 <main+0x370>)
 8000c12:	f7ff fecf 	bl	80009b4 <SPI_SendData>

		//AFTER SENDING DUMMY DATA THE MASTER WOULD HAVE RECIEVED THE SLAVE RESPONSE
		//THE RESPONSE HAS TO BE READ NOW
		SPI_RecieveData(SPI2, &rec_byte, 1);
 8000c16:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	48b8      	ldr	r0, [pc, #736]	; (8000f00 <main+0x370>)
 8000c20:	f7ff ff01 	bl	8000a26 <SPI_RecieveData>

		if( SPI_Verify(rec_byte))
 8000c24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ffa1 	bl	8000b70 <SPI_Verify>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d00c      	beq.n	8000c4e <main+0xbe>
		{
			//SEND ARGS
			args[0] = LED_PIN;
 8000c34:	2309      	movs	r3, #9
 8000c36:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			args[1] = LED_ON;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			SPI_SendData(SPI2, args, 2);
 8000c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c44:	2202      	movs	r2, #2
 8000c46:	4619      	mov	r1, r3
 8000c48:	48ad      	ldr	r0, [pc, #692]	; (8000f00 <main+0x370>)
 8000c4a:	f7ff feb3 	bl	80009b4 <SPI_SendData>
		}

		/* CMD <SENSOR READ> */

		//WAIT TILL BUTTON IS PRESSED
		while( (GPIO_ReadIPin(GPIOC, GPIO_PIN_13)) );
 8000c4e:	bf00      	nop
 8000c50:	210d      	movs	r1, #13
 8000c52:	48aa      	ldr	r0, [pc, #680]	; (8000efc <main+0x36c>)
 8000c54:	f7ff fd7c 	bl	8000750 <GPIO_ReadIPin>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1f8      	bne.n	8000c50 <main+0xc0>

		//DELAY TO COMPENSATE BUTTON DEBOUNCING
		delay(3);
 8000c5e:	2003      	movs	r0, #3
 8000c60:	f7ff ff14 	bl	8000a8c <delay>

		CmndCode = COMMAND_SENSOR_READ;
 8000c64:	2351      	movs	r3, #81	; 0x51
 8000c66:	75fb      	strb	r3, [r7, #23]

		//SEND THE DATA TO THE ARDUINO SLAVE
		SPI_SendData(SPI2, &CmndCode, 1);
 8000c68:	f107 0317 	add.w	r3, r7, #23
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	4619      	mov	r1, r3
 8000c70:	48a3      	ldr	r0, [pc, #652]	; (8000f00 <main+0x370>)
 8000c72:	f7ff fe9f 	bl	80009b4 <SPI_SendData>

		//READ THE DUMMY VAR RECEIVED -- IF NOT READ IT WILL SET THE RXNE BIT
		SPI_RecieveData(SPI2, &dummy_read, 1);
 8000c76:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	48a0      	ldr	r0, [pc, #640]	; (8000f00 <main+0x370>)
 8000c80:	f7ff fed1 	bl	8000a26 <SPI_RecieveData>

		//SEND DUMMY DATA TO FETCH THE RESPONSE FROM THE SLAVE -- THE SLAVE WILL NOT INITIATE DATA TRANSFER THE MASTER HAS TO FETCH
		//BY SENDING DUMMY DATA
		SPI_SendData(SPI2, &dummy_write, 1);
 8000c84:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8000c88:	2201      	movs	r2, #1
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	489c      	ldr	r0, [pc, #624]	; (8000f00 <main+0x370>)
 8000c8e:	f7ff fe91 	bl	80009b4 <SPI_SendData>

		//AFTER SENDING DUMMY DATA THE MASTER WOULD HAVE RECIEVED THE SLAVE RESPONSE
		//THE RESPONSE HAS TO BE READ NOW
		SPI_RecieveData(SPI2, &rec_byte, 1);
 8000c92:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8000c96:	2201      	movs	r2, #1
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4899      	ldr	r0, [pc, #612]	; (8000f00 <main+0x370>)
 8000c9c:	f7ff fec3 	bl	8000a26 <SPI_RecieveData>

		if( SPI_Verify(rec_byte))
 8000ca0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff ff63 	bl	8000b70 <SPI_Verify>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d021      	beq.n	8000cf4 <main+0x164>
		{
			//SEND ARGS
			args[0] = ANALOG_PIN0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			SPI_SendData(SPI2, args, 1);
 8000cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cba:	2201      	movs	r2, #1
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4890      	ldr	r0, [pc, #576]	; (8000f00 <main+0x370>)
 8000cc0:	f7ff fe78 	bl	80009b4 <SPI_SendData>

			//READ THE DUMMY VAR RECEIVED -- IF NOT READ IT WILL SET THE RXNE BIT
			SPI_RecieveData(SPI2, &dummy_read, 1);
 8000cc4:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4619      	mov	r1, r3
 8000ccc:	488c      	ldr	r0, [pc, #560]	; (8000f00 <main+0x370>)
 8000cce:	f7ff feaa 	bl	8000a26 <SPI_RecieveData>

			//INSERT DELAY SUCH THAT ADC IS READY WITH THE CONVERSION
			delay(1);
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	f7ff feda 	bl	8000a8c <delay>

			//SEND DUMMY DATA TO FETCH THE RESPONSE FROM THE SLAVE -- THE SLAVE WILL NOT INITIATE DATA TRANSFER THE MASTER HAS TO FETCH
			//BY SENDING DUMMY DATA
			SPI_SendData(SPI2, &dummy_write, 1);
 8000cd8:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8000cdc:	2201      	movs	r2, #1
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4887      	ldr	r0, [pc, #540]	; (8000f00 <main+0x370>)
 8000ce2:	f7ff fe67 	bl	80009b4 <SPI_SendData>

			//READ THE RECIEVED DATA INPUT
			SPI_RecieveData(SPI2, &analog_read, 1);
 8000ce6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cea:	2201      	movs	r2, #1
 8000cec:	4619      	mov	r1, r3
 8000cee:	4884      	ldr	r0, [pc, #528]	; (8000f00 <main+0x370>)
 8000cf0:	f7ff fe99 	bl	8000a26 <SPI_RecieveData>
		/*
		 * 3. COMMAND_LED_READ  <send_PIN_NO> <rec_VALUE>
		 */

		//WAIT TILL BUTTON IS PRESSED
		while( (GPIO_ReadIPin(GPIOC, GPIO_PIN_13)) );
 8000cf4:	bf00      	nop
 8000cf6:	210d      	movs	r1, #13
 8000cf8:	4880      	ldr	r0, [pc, #512]	; (8000efc <main+0x36c>)
 8000cfa:	f7ff fd29 	bl	8000750 <GPIO_ReadIPin>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d1f8      	bne.n	8000cf6 <main+0x166>

		//DELAY TO COMPENSATE BUTTON DEBOUNCING
		delay(3);
 8000d04:	2003      	movs	r0, #3
 8000d06:	f7ff fec1 	bl	8000a8c <delay>

		CmndCode = COMMAND_LED_READ;
 8000d0a:	2352      	movs	r3, #82	; 0x52
 8000d0c:	75fb      	strb	r3, [r7, #23]

		SPI_SendData(SPI2, &CmndCode, 1);
 8000d0e:	f107 0317 	add.w	r3, r7, #23
 8000d12:	2201      	movs	r2, #1
 8000d14:	4619      	mov	r1, r3
 8000d16:	487a      	ldr	r0, [pc, #488]	; (8000f00 <main+0x370>)
 8000d18:	f7ff fe4c 	bl	80009b4 <SPI_SendData>

		SPI_RecieveData(SPI2, &dummy_read, 1);
 8000d1c:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8000d20:	2201      	movs	r2, #1
 8000d22:	4619      	mov	r1, r3
 8000d24:	4876      	ldr	r0, [pc, #472]	; (8000f00 <main+0x370>)
 8000d26:	f7ff fe7e 	bl	8000a26 <SPI_RecieveData>

		SPI_SendData(SPI2, &dummy_write, 1);
 8000d2a:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8000d2e:	2201      	movs	r2, #1
 8000d30:	4619      	mov	r1, r3
 8000d32:	4873      	ldr	r0, [pc, #460]	; (8000f00 <main+0x370>)
 8000d34:	f7ff fe3e 	bl	80009b4 <SPI_SendData>

		SPI_RecieveData(SPI2, &rec_byte, 1);
 8000d38:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	4619      	mov	r1, r3
 8000d40:	486f      	ldr	r0, [pc, #444]	; (8000f00 <main+0x370>)
 8000d42:	f7ff fe70 	bl	8000a26 <SPI_RecieveData>

		if( SPI_Verify(rec_byte))
 8000d46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ff10 	bl	8000b70 <SPI_Verify>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d01e      	beq.n	8000d94 <main+0x204>
		{
			args[0] = LED_PIN;
 8000d56:	2309      	movs	r3, #9
 8000d58:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			SPI_SendData(SPI2, args, 1);
 8000d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d60:	2201      	movs	r2, #1
 8000d62:	4619      	mov	r1, r3
 8000d64:	4866      	ldr	r0, [pc, #408]	; (8000f00 <main+0x370>)
 8000d66:	f7ff fe25 	bl	80009b4 <SPI_SendData>

			SPI_RecieveData(SPI2, &dummy_read, 1);
 8000d6a:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8000d6e:	2201      	movs	r2, #1
 8000d70:	4619      	mov	r1, r3
 8000d72:	4863      	ldr	r0, [pc, #396]	; (8000f00 <main+0x370>)
 8000d74:	f7ff fe57 	bl	8000a26 <SPI_RecieveData>

			SPI_SendData(SPI2, &dummy_write, 1);
 8000d78:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	4619      	mov	r1, r3
 8000d80:	485f      	ldr	r0, [pc, #380]	; (8000f00 <main+0x370>)
 8000d82:	f7ff fe17 	bl	80009b4 <SPI_SendData>

			SPI_RecieveData(SPI2, &rec_byte, 1);
 8000d86:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	485c      	ldr	r0, [pc, #368]	; (8000f00 <main+0x370>)
 8000d90:	f7ff fe49 	bl	8000a26 <SPI_RecieveData>
		/*
		 * 4. COMMAND_PRINT  <send_ID>
		 */

		//WAIT TILL BUTTON IS PRESSED
		while( (GPIO_ReadIPin(GPIOC, GPIO_PIN_13)) );
 8000d94:	bf00      	nop
 8000d96:	210d      	movs	r1, #13
 8000d98:	4858      	ldr	r0, [pc, #352]	; (8000efc <main+0x36c>)
 8000d9a:	f7ff fcd9 	bl	8000750 <GPIO_ReadIPin>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d1f8      	bne.n	8000d96 <main+0x206>

		//DELAY TO COMPENSATE BUTTON DEBOUNCING
		delay(3);
 8000da4:	2003      	movs	r0, #3
 8000da6:	f7ff fe71 	bl	8000a8c <delay>

		CmndCode = COMMAND_PRINT;
 8000daa:	2353      	movs	r3, #83	; 0x53
 8000dac:	75fb      	strb	r3, [r7, #23]

		SPI_SendData(SPI2, &CmndCode, 1);
 8000dae:	f107 0317 	add.w	r3, r7, #23
 8000db2:	2201      	movs	r2, #1
 8000db4:	4619      	mov	r1, r3
 8000db6:	4852      	ldr	r0, [pc, #328]	; (8000f00 <main+0x370>)
 8000db8:	f7ff fdfc 	bl	80009b4 <SPI_SendData>

		SPI_RecieveData(SPI2, &dummy_read, 1);
 8000dbc:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	484e      	ldr	r0, [pc, #312]	; (8000f00 <main+0x370>)
 8000dc6:	f7ff fe2e 	bl	8000a26 <SPI_RecieveData>

		SPI_SendData(SPI2, &dummy_write, 1);
 8000dca:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8000dce:	2201      	movs	r2, #1
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	484b      	ldr	r0, [pc, #300]	; (8000f00 <main+0x370>)
 8000dd4:	f7ff fdee 	bl	80009b4 <SPI_SendData>

		SPI_RecieveData(SPI2, &rec_byte, 1);
 8000dd8:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8000ddc:	2201      	movs	r2, #1
 8000dde:	4619      	mov	r1, r3
 8000de0:	4847      	ldr	r0, [pc, #284]	; (8000f00 <main+0x370>)
 8000de2:	f7ff fe20 	bl	8000a26 <SPI_RecieveData>

		if( SPI_Verify(rec_byte))
 8000de6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fec0 	bl	8000b70 <SPI_Verify>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d023      	beq.n	8000e3e <main+0x2ae>
		{
			char message[] = "Hello ! How are you ??";
 8000df6:	4b43      	ldr	r3, [pc, #268]	; (8000f04 <main+0x374>)
 8000df8:	463c      	mov	r4, r7
 8000dfa:	461d      	mov	r5, r3
 8000dfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e00:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e04:	6020      	str	r0, [r4, #0]
 8000e06:	3404      	adds	r4, #4
 8000e08:	8021      	strh	r1, [r4, #0]
 8000e0a:	3402      	adds	r4, #2
 8000e0c:	0c0b      	lsrs	r3, r1, #16
 8000e0e:	7023      	strb	r3, [r4, #0]

			args[0] = strlen(message);
 8000e10:	463b      	mov	r3, r7
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff f9f6 	bl	8000204 <strlen>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			//send arguments
			SPI_SendData(SPI2,args,1); //sending length
 8000e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e24:	2201      	movs	r2, #1
 8000e26:	4619      	mov	r1, r3
 8000e28:	4835      	ldr	r0, [pc, #212]	; (8000f00 <main+0x370>)
 8000e2a:	f7ff fdc3 	bl	80009b4 <SPI_SendData>

			//send message
			SPI_SendData(SPI2,(uint8_t *)message,args[0]);
 8000e2e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e32:	461a      	mov	r2, r3
 8000e34:	463b      	mov	r3, r7
 8000e36:	4619      	mov	r1, r3
 8000e38:	4831      	ldr	r0, [pc, #196]	; (8000f00 <main+0x370>)
 8000e3a:	f7ff fdbb 	bl	80009b4 <SPI_SendData>

		/*
		 * 5. COMMAND_ID_READ  <rec_ID>
		 */
		//WAIT TILL BUTTON IS PRESSED
		while( (GPIO_ReadIPin(GPIOC, GPIO_PIN_13)) );
 8000e3e:	bf00      	nop
 8000e40:	210d      	movs	r1, #13
 8000e42:	482e      	ldr	r0, [pc, #184]	; (8000efc <main+0x36c>)
 8000e44:	f7ff fc84 	bl	8000750 <GPIO_ReadIPin>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d1f8      	bne.n	8000e40 <main+0x2b0>

		//DELAY TO COMPENSATE BUTTON DEBOUNCING
		delay(3);
 8000e4e:	2003      	movs	r0, #3
 8000e50:	f7ff fe1c 	bl	8000a8c <delay>

		CmndCode = COMMAND_ID_READ;
 8000e54:	2354      	movs	r3, #84	; 0x54
 8000e56:	75fb      	strb	r3, [r7, #23]

		SPI_SendData(SPI2, &CmndCode, 1);
 8000e58:	f107 0317 	add.w	r3, r7, #23
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4827      	ldr	r0, [pc, #156]	; (8000f00 <main+0x370>)
 8000e62:	f7ff fda7 	bl	80009b4 <SPI_SendData>

		SPI_RecieveData(SPI2, &dummy_read, 1);
 8000e66:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4824      	ldr	r0, [pc, #144]	; (8000f00 <main+0x370>)
 8000e70:	f7ff fdd9 	bl	8000a26 <SPI_RecieveData>

		SPI_SendData(SPI2, &dummy_write, 1);
 8000e74:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8000e78:	2201      	movs	r2, #1
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4820      	ldr	r0, [pc, #128]	; (8000f00 <main+0x370>)
 8000e7e:	f7ff fd99 	bl	80009b4 <SPI_SendData>

		SPI_RecieveData(SPI2, &rec_byte, 1);
 8000e82:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8000e86:	2201      	movs	r2, #1
 8000e88:	4619      	mov	r1, r3
 8000e8a:	481d      	ldr	r0, [pc, #116]	; (8000f00 <main+0x370>)
 8000e8c:	f7ff fdcb 	bl	8000a26 <SPI_RecieveData>

		if( SPI_Verify(rec_byte))
 8000e90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fe6b 	bl	8000b70 <SPI_Verify>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d020      	beq.n	8000ee2 <main+0x352>
		{
			char *RecieveByte;

			for(uint8_t i=0; i<10; i++)
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000ea6:	e018      	b.n	8000eda <main+0x34a>
			{
				SPI_SendData(SPI2, &dummy_write, 1);
 8000ea8:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8000eac:	2201      	movs	r2, #1
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4813      	ldr	r0, [pc, #76]	; (8000f00 <main+0x370>)
 8000eb2:	f7ff fd7f 	bl	80009b4 <SPI_SendData>
				SPI_RecieveData(SPI2, &rec_byte, 1);
 8000eb6:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8000eba:	2201      	movs	r2, #1
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4810      	ldr	r0, [pc, #64]	; (8000f00 <main+0x370>)
 8000ec0:	f7ff fdb1 	bl	8000a26 <SPI_RecieveData>

				*(RecieveByte++) = (char)rec_byte;
 8000ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec6:	1c5a      	adds	r2, r3, #1
 8000ec8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000eca:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000ece:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=0; i<10; i++)
 8000ed0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000eda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000ede:	2b09      	cmp	r3, #9
 8000ee0:	d9e2      	bls.n	8000ea8 <main+0x318>
			}
		}

		//CONFIRM SPI IS NOT BUSY
	    while( !SPI_GetFagStatus(SPI2, SPI_SR_BSY) );
 8000ee2:	bf00      	nop
 8000ee4:	2107      	movs	r1, #7
 8000ee6:	4806      	ldr	r0, [pc, #24]	; (8000f00 <main+0x370>)
 8000ee8:	f7ff fc48 	bl	800077c <SPI_GetFagStatus>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d0f8      	beq.n	8000ee4 <main+0x354>

	    //DISABLE THE SPI PERIPHERAL
	    SPI_Enable(SPI2, DISABLE);
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4802      	ldr	r0, [pc, #8]	; (8000f00 <main+0x370>)
 8000ef6:	f7ff fc55 	bl	80007a4 <SPI_Enable>
	{
 8000efa:	e666      	b.n	8000bca <main+0x3a>
 8000efc:	40020800 	.word	0x40020800
 8000f00:	40003800 	.word	0x40003800
 8000f04:	08000fcc 	.word	0x08000fcc

08000f08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f08:	480d      	ldr	r0, [pc, #52]	; (8000f40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f0a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f0c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f10:	480c      	ldr	r0, [pc, #48]	; (8000f44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f12:	490d      	ldr	r1, [pc, #52]	; (8000f48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f14:	4a0d      	ldr	r2, [pc, #52]	; (8000f4c <LoopForever+0xe>)
  movs r3, #0
 8000f16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f18:	e002      	b.n	8000f20 <LoopCopyDataInit>

08000f1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f1e:	3304      	adds	r3, #4

08000f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f24:	d3f9      	bcc.n	8000f1a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f26:	4a0a      	ldr	r2, [pc, #40]	; (8000f50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f28:	4c0a      	ldr	r4, [pc, #40]	; (8000f54 <LoopForever+0x16>)
  movs r3, #0
 8000f2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f2c:	e001      	b.n	8000f32 <LoopFillZerobss>

08000f2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f30:	3204      	adds	r2, #4

08000f32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f34:	d3fb      	bcc.n	8000f2e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f36:	f000 f811 	bl	8000f5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f3a:	f7ff fe29 	bl	8000b90 <main>

08000f3e <LoopForever>:

LoopForever:
    b LoopForever
 8000f3e:	e7fe      	b.n	8000f3e <LoopForever>
  ldr   r0, =_estack
 8000f40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f48:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000f4c:	08000fec 	.word	0x08000fec
  ldr r2, =_sbss
 8000f50:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000f54:	2000001c 	.word	0x2000001c

08000f58 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f58:	e7fe      	b.n	8000f58 <ADC_IRQHandler>
	...

08000f5c <__libc_init_array>:
 8000f5c:	b570      	push	{r4, r5, r6, lr}
 8000f5e:	4e0d      	ldr	r6, [pc, #52]	; (8000f94 <__libc_init_array+0x38>)
 8000f60:	4c0d      	ldr	r4, [pc, #52]	; (8000f98 <__libc_init_array+0x3c>)
 8000f62:	1ba4      	subs	r4, r4, r6
 8000f64:	10a4      	asrs	r4, r4, #2
 8000f66:	2500      	movs	r5, #0
 8000f68:	42a5      	cmp	r5, r4
 8000f6a:	d109      	bne.n	8000f80 <__libc_init_array+0x24>
 8000f6c:	4e0b      	ldr	r6, [pc, #44]	; (8000f9c <__libc_init_array+0x40>)
 8000f6e:	4c0c      	ldr	r4, [pc, #48]	; (8000fa0 <__libc_init_array+0x44>)
 8000f70:	f000 f820 	bl	8000fb4 <_init>
 8000f74:	1ba4      	subs	r4, r4, r6
 8000f76:	10a4      	asrs	r4, r4, #2
 8000f78:	2500      	movs	r5, #0
 8000f7a:	42a5      	cmp	r5, r4
 8000f7c:	d105      	bne.n	8000f8a <__libc_init_array+0x2e>
 8000f7e:	bd70      	pop	{r4, r5, r6, pc}
 8000f80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f84:	4798      	blx	r3
 8000f86:	3501      	adds	r5, #1
 8000f88:	e7ee      	b.n	8000f68 <__libc_init_array+0xc>
 8000f8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f8e:	4798      	blx	r3
 8000f90:	3501      	adds	r5, #1
 8000f92:	e7f2      	b.n	8000f7a <__libc_init_array+0x1e>
 8000f94:	08000fe4 	.word	0x08000fe4
 8000f98:	08000fe4 	.word	0x08000fe4
 8000f9c:	08000fe4 	.word	0x08000fe4
 8000fa0:	08000fe8 	.word	0x08000fe8

08000fa4 <memset>:
 8000fa4:	4402      	add	r2, r0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d100      	bne.n	8000fae <memset+0xa>
 8000fac:	4770      	bx	lr
 8000fae:	f803 1b01 	strb.w	r1, [r3], #1
 8000fb2:	e7f9      	b.n	8000fa8 <memset+0x4>

08000fb4 <_init>:
 8000fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fb6:	bf00      	nop
 8000fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fba:	bc08      	pop	{r3}
 8000fbc:	469e      	mov	lr, r3
 8000fbe:	4770      	bx	lr

08000fc0 <_fini>:
 8000fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fc2:	bf00      	nop
 8000fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fc6:	bc08      	pop	{r3}
 8000fc8:	469e      	mov	lr, r3
 8000fca:	4770      	bx	lr
